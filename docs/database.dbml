// Describing the structure of a banking system database using DBML

// User Table
Table user {
  id integer [pk, increment] // Primary key, auto-incremented
  username varchar [unique, not null] // Username, unique and not null
  email varchar [unique, not null] // Email, unique and not null
  hashed_password varchar [not null] // Hashed password
  created_at timestamp [default: `now()`] // Creation time
  updated_at timestamp // Update time
}

// Account Table
Table account {
  id integer [pk, increment] // Primary key, auto-incremented
  user_id integer [not null, ref: > user.id] // Foreign key, references the user table
  account_number varchar [unique, not null] // Account number, unique and not null
  balance decimal [not null, default: 0] // Balance, not null, default value is 0
  created_at timestamp [default: `now()`] // Creation time
  updated_at timestamp // Update time
}

// Transaction Table
Table transaction {
  id integer [pk, increment] // Primary key, auto-incremented
  from_account_id integer [not null, ref: > account.id] // Foreign key, references the account table (source account)
  to_account_id integer [ref: > account.id] // Foreign key, references the account table (target account, nullable for withdrawals)
  amount decimal [not null] // Transaction amount
  transaction_type varchar [not null] // Transaction type (deposit, withdrawal, transfer)
  timestamp timestamp [default: `now()`] // Transaction time
  description text // Transaction description
}

// JWT Tokens Table (optional, used to manage issued tokens)
Table jwt_tokens {
  id integer [pk, increment] // Primary key, auto-incremented
  user_id integer [not null, ref: > user.id] // Foreign key, references the user table
  token text [not null] // JWT token
  expires_at timestamp [not null] // Expiration time
  created_at timestamp [default: `now()`] // Creation time
}

// Define relationships
Ref: account.user_id > user.id // A user can have multiple accounts
Ref: transaction.from_account_id > account.id // An account can have multiple transactions (as the source)
Ref: transaction.to_account_id > account.id // An account can have multiple transactions (as the target)
